import telebot
from telebot import types

token = '6579188711:AAHf34uQGiGLfd-7GsBXKj0r5umufdex2fc'
MLDockerBot = telebot.TeleBot(token)
characteristic = {}


def say_hello(message):
    markup = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å', callback_data='price')
    markup.row(start_button)
    MLDockerBot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω!', reply_markup=markup)


@MLDockerBot.message_handler(commands=['start'])
def hello(message):
    say_hello(message)
    MLDockerBot.delete_message(message.chat.id, message.message_id)


def buttons(characteristic) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup()
    if characteristic == 'price':
        price_1 = types.InlineKeyboardButton('–î–æ 10 —Ç—ã—Å—è—á', callback_data='0-10')
        price_2 = types.InlineKeyboardButton('10-20 —Ç—ã—Å—è—á', callback_data='10-20')
        price_3 = types.InlineKeyboardButton('20-30 —Ç—ã—Å—è—á', callback_data='20-30')
        price_4 = types.InlineKeyboardButton('30-40 —Ç—ã—Å—è—á', callback_data='30-40')
        price_5 = types.InlineKeyboardButton('40-50 —Ç—ã—Å—è—á', callback_data='40-50')
        price_6 = types.InlineKeyboardButton('–ë–æ–ª—å—à–µ 50 —Ç—ã—Å—è—á', callback_data='50+')
        next_but = types.InlineKeyboardButton('–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data='specifications')
        return_but = types.InlineKeyboardButton('–ó–∞–Ω–æ–≤–æ üîÑ', callback_data='price')
        markup.row(price_1, price_2, price_3)
        markup.row(price_4, price_5, price_6)
        markup.row(next_but, return_but)
        return markup
    elif characteristic == 'specifications':
        CPU = types.InlineKeyboardButton('CPU ‚öôÔ∏è', callback_data='CPU')
        Camera = types.InlineKeyboardButton('–ö–∞–º–µ—Ä–∞ üì∑', callback_data='Camera')
        RAM = types.InlineKeyboardButton('RAM üßÆ', callback_data='RAM')
        Battery = types.InlineKeyboardButton('–ë–∞—Ç–∞—Ä–µ—è üîã', callback_data='Battery')
        Display = types.InlineKeyboardButton('–≠–∫—Ä–∞–Ω üñ•Ô∏è', callback_data='Display')
        Brand = types.InlineKeyboardButton('–ë—Ä–µ–Ω–¥ üçé', callback_data='Brand')
        Memory = types.InlineKeyboardButton('–ü–∞–º—è—Ç—å üìÅ', callback_data='Memory')
        next_but = types.InlineKeyboardButton('–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data='result')
        clear_button = types.InlineKeyboardButton('–ó–∞–Ω–æ–≤–æ üîÑ', callback_data='price')
        markup.row(CPU, Camera, Brand, RAM)
        markup.row(Battery, Display, Memory)
        markup.row(next_but, clear_button)
        return markup
    elif characteristic == 'Display':
        Display60 = types.InlineKeyboardButton('60 –ì—Ü', callback_data='60gz')
        Display90 = types.InlineKeyboardButton('90 –ì—Ü', callback_data='90gz')
        Display120 = types.InlineKeyboardButton('120 –ì—Ü', callback_data='120gz')
        Display144 = types.InlineKeyboardButton('144 –ì—Ü', callback_data='144gz')
        return_but = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data='specifications')
        clear_button = types.InlineKeyboardButton('–ó–∞–Ω–æ–≤–æ üîÑ', callback_data='price')
        markup.row(Display60, Display90)
        markup.row(Display120, Display144)
        markup.row(return_but, clear_button)
        return markup
    elif characteristic == 'Brand':
        Apple = types.InlineKeyboardButton('Apple', callback_data='Apple')
        Samsung = types.InlineKeyboardButton('Samsung', callback_data='Samsung')
        Honor = types.InlineKeyboardButton('Honor', callback_data='Honor')
        Huawei = types.InlineKeyboardButton('Huawei', callback_data='Huawei')
        Xiaomi = types.InlineKeyboardButton('Xiaomi', callback_data='Xiaomi')
        Realme = types.InlineKeyboardButton('Realme', callback_data='Realme')
        return_but = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data='specifications')
        clear_button = types.InlineKeyboardButton('–ó–∞–Ω–æ–≤–æ üîÑ', callback_data='price')
        markup.row(Apple, Samsung, Honor)
        markup.row(Huawei, Xiaomi, Realme)
        markup.row(return_but, clear_button)
        return markup
    elif characteristic == 'Memory':
        Memory64 = types.InlineKeyboardButton('64 –ì–±', callback_data='64gb')
        Memory128 = types.InlineKeyboardButton('128 –ì–±', callback_data='128gb')
        Memory256 = types.InlineKeyboardButton('256 –ì–±', callback_data='256gb')
        Memory512 = types.InlineKeyboardButton('512 –ì–±', callback_data='512gb')
        Memory1024 = types.InlineKeyboardButton('1024 –ì–±', callback_data='1024gb')
        MemorySD = types.InlineKeyboardButton('–°–ª–æ—Ç –ø–æ–¥ SD-–∫–∞—Ä—Ç—É', callback_data='SD')
        return_but = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚óÄÔ∏è', callback_data='specifications')
        clear_button = types.InlineKeyboardButton('–ó–∞–Ω–æ–≤–æ üîÑ', callback_data='price')
        markup.row(Memory64, Memory128, Memory256, Memory512)
        markup.row(Memory1024, MemorySD)
        markup.row(return_but, clear_button)
        return markup
    elif characteristic == 'restart':
        restart_but = types.InlineKeyboardButton('–ï—â–µ —Ä–∞–∑', callback_data='price')
        markup.add(restart_but)
        return markup


@MLDockerBot.callback_query_handler(
    func=lambda callback: callback.data in ('price', 'specifications', 'result',
                                            '0-10', '10-20', '20-30', '30-40', '40-50', '50+',
                                            'CPU', 'Camera', 'RAM', 'Battery', 'Display', 'Brand', 'Memory',
                                            '60gz', '90gz', '120gz', '144gz',
                                                                     'Apple', 'Samsung', 'Honor', 'Huawei', 'Xiaomi',
                                            'Realme',
                                            '64gb', '128gb', '256gb', '512gb', '1024gb', 'SD'
                                            )
)
def characteristics_choice(callback):
    if callback.data == 'price':
        characteristic.clear()
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω!\n'
                                 '–ö–∞–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ?\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:',
                                 reply_markup=buttons('price'))
    elif callback.data == 'specifications':
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–µ—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n',
                                 reply_markup=buttons('specifications'))
    elif callback.data == 'Display':
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n',
                                 reply_markup=buttons('Display'))
    elif callback.data == 'Brand':
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –±—Ä–µ–Ω–¥ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n',
                                 reply_markup=buttons('Brand'))
    elif callback.data == 'Memory':
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n',
                                 reply_markup=buttons('Memory'))
    elif callback.data in ('CPU', 'Camera', 'RAM', 'Battery'):
        characteristic[callback.data] = True
    elif callback.data in ('0-10', '10-20', '20-30', '30-40', '40-50', '50+'):
        if 'Price' not in characteristic.keys():
            characteristic['Price'] = [callback.data]
        else:
            characteristic['Price'].append(callback.data)
    elif callback.data in ('60gz', '90gz', '120gz', '144gz'):
        if 'Display' not in characteristic.keys():
            characteristic['Display'] = [callback.data]
        else:
            characteristic['Display'].append(callback.data)
    elif callback.data in ('Apple', 'Samsung', 'Honor', 'Huawei', 'Xiaomi', 'Realme'):
        if 'Brand' not in characteristic.keys():
            characteristic['Brand'] = [callback.data]
        else:
            characteristic['Brand'].append(callback.data)
    elif callback.data in ('64gb', '128gb', '256gb', '512gb', '1024gb', 'SD'):
        if 'Memory' not in characteristic.keys():
            characteristic['Memory'] = [callback.data]
        else:
            characteristic['Memory'].append(callback.data)
    elif callback.data == 'result':
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 f'–í–æ—Ç –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {characteristic}\n'
                                 '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                 reply_markup=buttons('restart'))


if __name__ == '__main__':
    MLDockerBot.infinity_polling()
