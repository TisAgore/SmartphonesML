import telebot
from telebot import types

token = '6579188711:AAHf34uQGiGLfd-7GsBXKj0r5umufdex2fc'
MLDockerBot = telebot.TeleBot(token)
characteristic = []


def say_hello(message):
    markup = types.InlineKeyboardMarkup()
    start_button = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å', callback_data='price')
    markup.row(start_button)
    MLDockerBot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω!', reply_markup=markup)


@MLDockerBot.message_handler(commands=['start'])
def hello(message):
    say_hello(message)
    MLDockerBot.delete_message(message.chat.id, message.message_id)


def buttons(characteristic) -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup()
    if characteristic == 'price':
        price_1 = types.InlineKeyboardButton('–î–æ 10 —Ç—ã—Å—è—á', callback_data='0-10')
        price_2 = types.InlineKeyboardButton('10-20 —Ç—ã—Å—è—á', callback_data='10-20')
        price_3 = types.InlineKeyboardButton('20-30 —Ç—ã—Å—è—á', callback_data='20-30')
        price_4 = types.InlineKeyboardButton('30-40 —Ç—ã—Å—è—á', callback_data='30-40')
        price_5 = types.InlineKeyboardButton('40-50 —Ç—ã—Å—è—á', callback_data='40-50')
        price_6 = types.InlineKeyboardButton('–ë–æ–ª—å—à–µ 50 —Ç—ã—Å—è—á', callback_data='50+')
        next_but = types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='specifications')
        return_but = types.InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å', callback_data='price')
        markup.row(price_1, price_2, price_3)
        markup.row(price_4, price_5, price_6)
        markup.row(next_but, return_but)
        return markup
    elif characteristic == 'specifications':
        CPU = types.InlineKeyboardButton('CPU ‚Äçü¶Ω', callback_data='CPU')
        Camera = types.InlineKeyboardButton('–ö–∞–º–µ—Ä–∞ üì∏', callback_data='Camera')
        RAM = types.InlineKeyboardButton('RAM üëô', callback_data='RAM')
        Battery = types.InlineKeyboardButton('–ë–∞—Ç–∞—Ä–µ—è üí•', callback_data='Battery')
        Display = types.InlineKeyboardButton('–≠–∫—Ä–∞–Ω üëÅÔ∏è', callback_data='Display')
        Brand = types.InlineKeyboardButton('–ë—Ä–µ–Ω–¥ üá∑üá∫', callback_data='Brand')
        next_but = types.InlineKeyboardButton('–î–∞–ª–µ–µ', callback_data='result')
        return_but = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='price')
        markup.row(CPU, Camera, Brand)
        markup.row(Battery, Display, RAM)
        markup.row(next_but, return_but)
        return markup
    elif characteristic == 'restart':
        restart_but = types.InlineKeyboardButton('–ï—â–µ —Ä–∞–∑', callback_data='price')
        markup.add(restart_but)
        return markup


@MLDockerBot.callback_query_handler(
    func=lambda callback: callback.data in ('price', 'specifications', 'result', '0-10', '10-20',
                                            '20-30', '30-40', '40-50', '50+', 'CPU', 'Camera',
                                            'RAM', 'Battery', 'Display', 'Brand', 'manual')
)
def characteristics_choice(callback):
    global characteristic
    if callback.data == 'manual':
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∫–æ–∫ –±–∞–±–æ–∫ –∏ —Ç–∞–º –µ—â–µ\n'
                                 '–ë–ª—è –≤—ã –≤–æ–æ–±—â–µ –¥–∞—É–Ω—ã —ç—Ç–æ –∂–µ –µ–±–∞—Ç—å –∏–∑–∏')
    if callback.data == 'price':
        characteristic = []
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω!\n'
                                 '–ö–∞–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ?\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:',
                                 reply_markup=buttons('price'))
    elif callback.data in ('0-10', '10-20', '20-30', '30-40', '40-50', '50+'):
        characteristic.append(callback.data)
    elif callback.data == 'specifications':
        for temp_characteristic in ('CPU', 'Camera', 'RAM', 'Battery', 'Display', 'Brand'):
            if temp_characteristic in characteristic:
                characteristic.remove(temp_characteristic)
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 '–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–µ—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.\n'
                                 '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n',
                                 reply_markup=buttons('specifications'))
    elif callback.data in ('CPU', 'Camera', 'RAM', 'Battery', 'Display', 'Brand'):
        characteristic.append(callback.data)
    elif callback.data == 'result':
        MLDockerBot.delete_message(callback.message.chat.id, callback.message.message_id)
        MLDockerBot.send_message(callback.message.chat.id,
                                 f'–í–æ—Ç –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {characteristic}\n'
                                 '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?',
                                 reply_markup=buttons('restart'))


if __name__ == '__main__':
    MLDockerBot.infinity_polling()
